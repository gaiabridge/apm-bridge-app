/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IFeeDBInterface extends utils.Interface {
  contractName: "IFeeDB";
  functions: {
    "getFeeDataForReceive(address,bytes)": FunctionFragment;
    "getFeeDataForSend(address,bytes)": FunctionFragment;
    "nftDiscountRate(address)": FunctionFragment;
    "paysFeeWhenSending()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "protocolFeeRecipient()": FunctionFragment;
    "userDiscountRate(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getFeeDataForReceive",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDataForSend",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nftDiscountRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "paysFeeWhenSending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDiscountRate",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeDataForReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDataForSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paysFeeWhenSending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDiscountRate",
    data: BytesLike
  ): Result;

  events: {
    "UpdateFeeAndRecipient(uint256,address)": EventFragment;
    "UpdateNFTDiscountRate(address,uint256)": EventFragment;
    "UpdatePaysFeeWhenSending(bool)": EventFragment;
    "UpdateUserDiscountRate(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateFeeAndRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateNFTDiscountRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePaysFeeWhenSending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUserDiscountRate"): EventFragment;
}

export type UpdateFeeAndRecipientEvent = TypedEvent<
  [BigNumber, string],
  { newFee: BigNumber; newRecipient: string }
>;

export type UpdateFeeAndRecipientEventFilter =
  TypedEventFilter<UpdateFeeAndRecipientEvent>;

export type UpdateNFTDiscountRateEvent = TypedEvent<
  [string, BigNumber],
  { nft: string; discountRate: BigNumber }
>;

export type UpdateNFTDiscountRateEventFilter =
  TypedEventFilter<UpdateNFTDiscountRateEvent>;

export type UpdatePaysFeeWhenSendingEvent = TypedEvent<
  [boolean],
  { newType: boolean }
>;

export type UpdatePaysFeeWhenSendingEventFilter =
  TypedEventFilter<UpdatePaysFeeWhenSendingEvent>;

export type UpdateUserDiscountRateEvent = TypedEvent<
  [string, BigNumber],
  { user: string; discountRate: BigNumber }
>;

export type UpdateUserDiscountRateEventFilter =
  TypedEventFilter<UpdateUserDiscountRateEvent>;

export interface IFeeDB extends BaseContract {
  contractName: "IFeeDB";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeDBInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFeeDataForReceive(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _recipient: string; _discountRate: BigNumber }
    >;

    getFeeDataForSend(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber] & {
        _paysFeeWhenSending: boolean;
        _recipient: string;
        _protocolFee: BigNumber;
        _discountRate: BigNumber;
      }
    >;

    nftDiscountRate(
      nft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paysFeeWhenSending(overrides?: CallOverrides): Promise<[boolean]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    userDiscountRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getFeeDataForReceive(
    user: string,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { _recipient: string; _discountRate: BigNumber }
  >;

  getFeeDataForSend(
    user: string,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber] & {
      _paysFeeWhenSending: boolean;
      _recipient: string;
      _protocolFee: BigNumber;
      _discountRate: BigNumber;
    }
  >;

  nftDiscountRate(nft: string, overrides?: CallOverrides): Promise<BigNumber>;

  paysFeeWhenSending(overrides?: CallOverrides): Promise<boolean>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeRecipient(overrides?: CallOverrides): Promise<string>;

  userDiscountRate(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getFeeDataForReceive(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _recipient: string; _discountRate: BigNumber }
    >;

    getFeeDataForSend(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber] & {
        _paysFeeWhenSending: boolean;
        _recipient: string;
        _protocolFee: BigNumber;
        _discountRate: BigNumber;
      }
    >;

    nftDiscountRate(nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    paysFeeWhenSending(overrides?: CallOverrides): Promise<boolean>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<string>;

    userDiscountRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "UpdateFeeAndRecipient(uint256,address)"(
      newFee?: null,
      newRecipient?: null
    ): UpdateFeeAndRecipientEventFilter;
    UpdateFeeAndRecipient(
      newFee?: null,
      newRecipient?: null
    ): UpdateFeeAndRecipientEventFilter;

    "UpdateNFTDiscountRate(address,uint256)"(
      nft?: null,
      discountRate?: null
    ): UpdateNFTDiscountRateEventFilter;
    UpdateNFTDiscountRate(
      nft?: null,
      discountRate?: null
    ): UpdateNFTDiscountRateEventFilter;

    "UpdatePaysFeeWhenSending(bool)"(
      newType?: null
    ): UpdatePaysFeeWhenSendingEventFilter;
    UpdatePaysFeeWhenSending(
      newType?: null
    ): UpdatePaysFeeWhenSendingEventFilter;

    "UpdateUserDiscountRate(address,uint256)"(
      user?: null,
      discountRate?: null
    ): UpdateUserDiscountRateEventFilter;
    UpdateUserDiscountRate(
      user?: null,
      discountRate?: null
    ): UpdateUserDiscountRateEventFilter;
  };

  estimateGas: {
    getFeeDataForReceive(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeDataForSend(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftDiscountRate(nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    paysFeeWhenSending(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    userDiscountRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFeeDataForReceive(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeDataForSend(
      user: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftDiscountRate(
      nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paysFeeWhenSending(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDiscountRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
